from sympy import symbols, Eq, solve
from Crypto.Util.number import *
import gmpy2
import libnum
# 已知的参数
n_value = 17918079706161007895622844669304802063151695517690927900630994397071693440782390581645793203996211647338814654829571782036132457651781282496574577404081423361473277011371823441347990815437621195994970899876166235097252632003428818683986131655912150264150559692859752550655908121776108384776871387610490928020306396747921176545775339837718933646359068135466991087077802838170597325746924140236226081499269898476481922682387807755601504747007811056039869086959374815287149323087784829918751769557009490467343607283563127840637466239689099538678064957074726781557583465827676275424881056751176672024104656322250184012977
hint_value = 684876483034382864300930177825692952761271025694766174530399650057291066975587250791469172803179786121136422890477887174755136149952519112116194261596405931261242214663918236400980304528296356718003234051461452836121324981751608338928280512986206310081280814723639876935646904811836997952118775571540509872203
e = 0x10001
# 使用SymPy创建符号
p, q = symbols('p q')
# 根据已知的公式建立等式
equation1 = Eq(n_value, p * q)
equation2 = Eq(hint_value, 3*p + 2*q)
# 解方程
solution = solve((equation1, equation2), (p, q))
# 输出解
i = 1
x = solution[i][0]
y = solution[i][1]
# print(n_value - x * y)
print("p =", x)
print("q =", y, '\n')
n = 17918079706161007895622844669304802063151695517690927900630994397071693440782390581645793203996211647338814654829571782036132457651781282496574577404081423361473277011371823441347990815437621195994970899876166235097252632003428818683986131655912150264150559692859752550655908121776108384776871387610490928020306396747921176545775339837718933646359068135466991087077802838170597325746924140236226081499269898476481922682387807755601504747007811056039869086959374815287149323087784829918751769557009490467343607283563127840637466239689099538678064957074726781557583465827676275424881056751176672024104656322250184012977
c = 6500922327729767082068740435446164717447128097913423368185828741019789228052708043753228222408205689618835116815987084129693992286843291730950265403831125123210956448637235123598735840818089289277873917021800838889522950009532138747360328583636431106720085836060728679140030126456409994450186017232418009591437825538217774331309433759951472663124396985915337355161708130370230366738673198155231387741548268738211204721607041480190955512314492682988505614273617879309439429222934760730670862206304973609787347025187818450491763116823269590622523079628590270991836057435071443013534185796433005133011187572949670583436
# 计算欧拉函数值
# phi_n = int((x - 1) * (y - 1))
# phi_n = (x - 1) * (y - 1)
# 计算私钥指数 d
# d = pow(0x10001, -1, phi_n)
# n = gmpy2.mpz(n)
phi_n = gmpy2.mpz((x - 1) * (y - 1))
d = gmpy2.invert(0x10001, phi_n) % phi_n
print("d=", d)
# d = pow(0x10001, -1, phi_n)
# print("d=", d)
# 使用私钥解密得到明文
m = pow(c, d, n)
# c = pow(m, e, n)
print("m=", m, '\n')
# 将长整数转换为字节串
flag = long_to_bytes(m)
print(flag)
# flag=flag{ez_Ez_eZ_checkin_RsA}